// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionManagerServiceClient is the client API for TransactionManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionManagerServiceClient interface {
	Begin(ctx context.Context, in *GlobalBeginRequest, opts ...grpc.CallOption) (*GlobalBeginResponse, error)
	GetStatus(ctx context.Context, in *GlobalStatusRequest, opts ...grpc.CallOption) (*GlobalStatusResponse, error)
	GlobalReport(ctx context.Context, in *GlobalReportRequest, opts ...grpc.CallOption) (*GlobalReportResponse, error)
	Commit(ctx context.Context, in *GlobalCommitRequest, opts ...grpc.CallOption) (*GlobalCommitResponse, error)
	Rollback(ctx context.Context, in *GlobalRollbackRequest, opts ...grpc.CallOption) (*GlobalRollbackResponse, error)
}

type transactionManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionManagerServiceClient(cc grpc.ClientConnInterface) TransactionManagerServiceClient {
	return &transactionManagerServiceClient{cc}
}

func (c *transactionManagerServiceClient) Begin(ctx context.Context, in *GlobalBeginRequest, opts ...grpc.CallOption) (*GlobalBeginResponse, error) {
	out := new(GlobalBeginResponse)
	err := c.cc.Invoke(ctx, "/apis.TransactionManagerService/Begin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionManagerServiceClient) GetStatus(ctx context.Context, in *GlobalStatusRequest, opts ...grpc.CallOption) (*GlobalStatusResponse, error) {
	out := new(GlobalStatusResponse)
	err := c.cc.Invoke(ctx, "/apis.TransactionManagerService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionManagerServiceClient) GlobalReport(ctx context.Context, in *GlobalReportRequest, opts ...grpc.CallOption) (*GlobalReportResponse, error) {
	out := new(GlobalReportResponse)
	err := c.cc.Invoke(ctx, "/apis.TransactionManagerService/GlobalReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionManagerServiceClient) Commit(ctx context.Context, in *GlobalCommitRequest, opts ...grpc.CallOption) (*GlobalCommitResponse, error) {
	out := new(GlobalCommitResponse)
	err := c.cc.Invoke(ctx, "/apis.TransactionManagerService/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionManagerServiceClient) Rollback(ctx context.Context, in *GlobalRollbackRequest, opts ...grpc.CallOption) (*GlobalRollbackResponse, error) {
	out := new(GlobalRollbackResponse)
	err := c.cc.Invoke(ctx, "/apis.TransactionManagerService/Rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionManagerServiceServer is the server API for TransactionManagerService service.
// All implementations should embed UnimplementedTransactionManagerServiceServer
// for forward compatibility
type TransactionManagerServiceServer interface {
	Begin(context.Context, *GlobalBeginRequest) (*GlobalBeginResponse, error)
	GetStatus(context.Context, *GlobalStatusRequest) (*GlobalStatusResponse, error)
	GlobalReport(context.Context, *GlobalReportRequest) (*GlobalReportResponse, error)
	Commit(context.Context, *GlobalCommitRequest) (*GlobalCommitResponse, error)
	Rollback(context.Context, *GlobalRollbackRequest) (*GlobalRollbackResponse, error)
}

// UnimplementedTransactionManagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTransactionManagerServiceServer struct {
}

func (UnimplementedTransactionManagerServiceServer) Begin(context.Context, *GlobalBeginRequest) (*GlobalBeginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Begin not implemented")
}
func (UnimplementedTransactionManagerServiceServer) GetStatus(context.Context, *GlobalStatusRequest) (*GlobalStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedTransactionManagerServiceServer) GlobalReport(context.Context, *GlobalReportRequest) (*GlobalReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalReport not implemented")
}
func (UnimplementedTransactionManagerServiceServer) Commit(context.Context, *GlobalCommitRequest) (*GlobalCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedTransactionManagerServiceServer) Rollback(context.Context, *GlobalRollbackRequest) (*GlobalRollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}

// UnsafeTransactionManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionManagerServiceServer will
// result in compilation errors.
type UnsafeTransactionManagerServiceServer interface {
	mustEmbedUnimplementedTransactionManagerServiceServer()
}

func RegisterTransactionManagerServiceServer(s grpc.ServiceRegistrar, srv TransactionManagerServiceServer) {
	s.RegisterService(&TransactionManagerService_ServiceDesc, srv)
}

func _TransactionManagerService_Begin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionManagerServiceServer).Begin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.TransactionManagerService/Begin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionManagerServiceServer).Begin(ctx, req.(*GlobalBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionManagerService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionManagerServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.TransactionManagerService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionManagerServiceServer).GetStatus(ctx, req.(*GlobalStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionManagerService_GlobalReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionManagerServiceServer).GlobalReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.TransactionManagerService/GlobalReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionManagerServiceServer).GlobalReport(ctx, req.(*GlobalReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionManagerService_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionManagerServiceServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.TransactionManagerService/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionManagerServiceServer).Commit(ctx, req.(*GlobalCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionManagerService_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionManagerServiceServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.TransactionManagerService/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionManagerServiceServer).Rollback(ctx, req.(*GlobalRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionManagerService_ServiceDesc is the grpc.ServiceDesc for TransactionManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.TransactionManagerService",
	HandlerType: (*TransactionManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Begin",
			Handler:    _TransactionManagerService_Begin_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _TransactionManagerService_GetStatus_Handler,
		},
		{
			MethodName: "GlobalReport",
			Handler:    _TransactionManagerService_GlobalReport_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _TransactionManagerService_Commit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _TransactionManagerService_Rollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seata.proto",
}

// ResourceManagerServiceClient is the client API for ResourceManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceManagerServiceClient interface {
	BranchCommunicate(ctx context.Context, opts ...grpc.CallOption) (ResourceManagerService_BranchCommunicateClient, error)
	BranchRegister(ctx context.Context, in *BranchRegisterRequest, opts ...grpc.CallOption) (*BranchRegisterResponse, error)
	BranchReport(ctx context.Context, in *BranchReportRequest, opts ...grpc.CallOption) (*BranchReportResponse, error)
	LockQuery(ctx context.Context, in *GlobalLockQueryRequest, opts ...grpc.CallOption) (*GlobalLockQueryResponse, error)
}

type resourceManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceManagerServiceClient(cc grpc.ClientConnInterface) ResourceManagerServiceClient {
	return &resourceManagerServiceClient{cc}
}

func (c *resourceManagerServiceClient) BranchCommunicate(ctx context.Context, opts ...grpc.CallOption) (ResourceManagerService_BranchCommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceManagerService_ServiceDesc.Streams[0], "/apis.ResourceManagerService/BranchCommunicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceManagerServiceBranchCommunicateClient{stream}
	return x, nil
}

type ResourceManagerService_BranchCommunicateClient interface {
	Send(*BranchMessage) error
	Recv() (*BranchMessage, error)
	grpc.ClientStream
}

type resourceManagerServiceBranchCommunicateClient struct {
	grpc.ClientStream
}

func (x *resourceManagerServiceBranchCommunicateClient) Send(m *BranchMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *resourceManagerServiceBranchCommunicateClient) Recv() (*BranchMessage, error) {
	m := new(BranchMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourceManagerServiceClient) BranchRegister(ctx context.Context, in *BranchRegisterRequest, opts ...grpc.CallOption) (*BranchRegisterResponse, error) {
	out := new(BranchRegisterResponse)
	err := c.cc.Invoke(ctx, "/apis.ResourceManagerService/BranchRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) BranchReport(ctx context.Context, in *BranchReportRequest, opts ...grpc.CallOption) (*BranchReportResponse, error) {
	out := new(BranchReportResponse)
	err := c.cc.Invoke(ctx, "/apis.ResourceManagerService/BranchReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceManagerServiceClient) LockQuery(ctx context.Context, in *GlobalLockQueryRequest, opts ...grpc.CallOption) (*GlobalLockQueryResponse, error) {
	out := new(GlobalLockQueryResponse)
	err := c.cc.Invoke(ctx, "/apis.ResourceManagerService/LockQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceManagerServiceServer is the server API for ResourceManagerService service.
// All implementations should embed UnimplementedResourceManagerServiceServer
// for forward compatibility
type ResourceManagerServiceServer interface {
	BranchCommunicate(ResourceManagerService_BranchCommunicateServer) error
	BranchRegister(context.Context, *BranchRegisterRequest) (*BranchRegisterResponse, error)
	BranchReport(context.Context, *BranchReportRequest) (*BranchReportResponse, error)
	LockQuery(context.Context, *GlobalLockQueryRequest) (*GlobalLockQueryResponse, error)
}

// UnimplementedResourceManagerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedResourceManagerServiceServer struct {
}

func (UnimplementedResourceManagerServiceServer) BranchCommunicate(ResourceManagerService_BranchCommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method BranchCommunicate not implemented")
}
func (UnimplementedResourceManagerServiceServer) BranchRegister(context.Context, *BranchRegisterRequest) (*BranchRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BranchRegister not implemented")
}
func (UnimplementedResourceManagerServiceServer) BranchReport(context.Context, *BranchReportRequest) (*BranchReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BranchReport not implemented")
}
func (UnimplementedResourceManagerServiceServer) LockQuery(context.Context, *GlobalLockQueryRequest) (*GlobalLockQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockQuery not implemented")
}

// UnsafeResourceManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceManagerServiceServer will
// result in compilation errors.
type UnsafeResourceManagerServiceServer interface {
	mustEmbedUnimplementedResourceManagerServiceServer()
}

func RegisterResourceManagerServiceServer(s grpc.ServiceRegistrar, srv ResourceManagerServiceServer) {
	s.RegisterService(&ResourceManagerService_ServiceDesc, srv)
}

func _ResourceManagerService_BranchCommunicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ResourceManagerServiceServer).BranchCommunicate(&resourceManagerServiceBranchCommunicateServer{stream})
}

type ResourceManagerService_BranchCommunicateServer interface {
	Send(*BranchMessage) error
	Recv() (*BranchMessage, error)
	grpc.ServerStream
}

type resourceManagerServiceBranchCommunicateServer struct {
	grpc.ServerStream
}

func (x *resourceManagerServiceBranchCommunicateServer) Send(m *BranchMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *resourceManagerServiceBranchCommunicateServer) Recv() (*BranchMessage, error) {
	m := new(BranchMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ResourceManagerService_BranchRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).BranchRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.ResourceManagerService/BranchRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).BranchRegister(ctx, req.(*BranchRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_BranchReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).BranchReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.ResourceManagerService/BranchReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).BranchReport(ctx, req.(*BranchReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceManagerService_LockQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalLockQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceManagerServiceServer).LockQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apis.ResourceManagerService/LockQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceManagerServiceServer).LockQuery(ctx, req.(*GlobalLockQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceManagerService_ServiceDesc is the grpc.ServiceDesc for ResourceManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apis.ResourceManagerService",
	HandlerType: (*ResourceManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BranchRegister",
			Handler:    _ResourceManagerService_BranchRegister_Handler,
		},
		{
			MethodName: "BranchReport",
			Handler:    _ResourceManagerService_BranchReport_Handler,
		},
		{
			MethodName: "LockQuery",
			Handler:    _ResourceManagerService_LockQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BranchCommunicate",
			Handler:       _ResourceManagerService_BranchCommunicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "seata.proto",
}
