// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/http/authn/v2alpha1/config.proto

package v2alpha1

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"

	v1alpha1 "istio.io/istio/pkg/envoy/config/authentication/v1alpha1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// FilterConfig is the config for Istio-specific filter that is used to enforce
// authentication policy on Envoy.
type FilterConfig struct {
	// Policy is the original copy of the policy.
	Policy *v1alpha1.Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// Map from issuer to location of the payload that is emitted by Jwt filter.
	// This information is added by pilot when construct and add Jwt and
	// authN filters.
	JwtOutputPayloadLocations map[string]string `protobuf:"bytes,2,rep,name=jwt_output_payload_locations,json=jwtOutputPayloadLocations,proto3" json:"jwt_output_payload_locations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Skips validating the peer's trust domain.
	// By default, the istio authn filter will reject the request if the peer and
	// the local service is not in the same trust domain.
	// Set this field to true to skip the validation and allows peers from any
	// trust domains.
	// Note, the istio authn filter only validates the trust domain when mTLS is
	// used, In other words, this field has no effect for plaintext traffic.
	SkipValidateTrustDomain bool     `protobuf:"varint,3,opt,name=skip_validate_trust_domain,json=skipValidateTrustDomain,proto3" json:"skip_validate_trust_domain,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *FilterConfig) Reset()         { *m = FilterConfig{} }
func (m *FilterConfig) String() string { return proto.CompactTextString(m) }
func (*FilterConfig) ProtoMessage()    {}
func (*FilterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4b13c85ef974588, []int{0}
}

func (m *FilterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilterConfig.Unmarshal(m, b)
}
func (m *FilterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilterConfig.Marshal(b, m, deterministic)
}
func (m *FilterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterConfig.Merge(m, src)
}
func (m *FilterConfig) XXX_Size() int {
	return xxx_messageInfo_FilterConfig.Size(m)
}
func (m *FilterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FilterConfig proto.InternalMessageInfo

func (m *FilterConfig) GetPolicy() *v1alpha1.Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *FilterConfig) GetJwtOutputPayloadLocations() map[string]string {
	if m != nil {
		return m.JwtOutputPayloadLocations
	}
	return nil
}

func (m *FilterConfig) GetSkipValidateTrustDomain() bool {
	if m != nil {
		return m.SkipValidateTrustDomain
	}
	return false
}

func init() {
	proto.RegisterType((*FilterConfig)(nil), "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig")
	proto.RegisterMapType((map[string]string)(nil), "istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig.JwtOutputPayloadLocationsEntry")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/authn/v2alpha1/config.proto", fileDescriptor_b4b13c85ef974588)
}

var fileDescriptor_b4b13c85ef974588 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4b, 0x33, 0x31,
	0x10, 0xc6, 0xd9, 0x2d, 0x6f, 0x79, 0x4d, 0x3d, 0xc8, 0x22, 0xb8, 0x16, 0x91, 0x22, 0x0a, 0xbd,
	0x98, 0xd0, 0x5a, 0x44, 0x14, 0x2f, 0xfe, 0x3b, 0x48, 0xc1, 0xb2, 0x88, 0x87, 0x5e, 0x96, 0xd8,
	0x6e, 0xed, 0xb4, 0x31, 0x13, 0x76, 0x67, 0xb7, 0xec, 0x67, 0xf1, 0x7b, 0x7a, 0x96, 0x4d, 0xb6,
	0xa0, 0x07, 0x45, 0x6f, 0x99, 0x3c, 0xcf, 0xf3, 0x9b, 0x64, 0x12, 0x36, 0x48, 0x74, 0x81, 0xa5,
	0x98, 0xa0, 0x9e, 0xc1, 0x8b, 0x98, 0x81, 0xa2, 0x24, 0x15, 0x73, 0x22, 0x23, 0x64, 0x4e, 0x73,
	0x2d, 0x8a, 0xbe, 0x54, 0x66, 0x2e, 0x7b, 0xb5, 0x83, 0x9b, 0x14, 0x09, 0x83, 0x63, 0xc8, 0x08,
	0x90, 0xdb, 0x2c, 0xaf, 0x15, 0x97, 0xe5, 0x55, 0x96, 0xdb, 0x2c, 0x5f, 0x67, 0xdb, 0x87, 0x55,
	0x9d, 0x68, 0x82, 0x89, 0x24, 0x40, 0x2d, 0x8a, 0x5e, 0x0d, 0x35, 0xa8, 0x60, 0x52, 0x3a, 0xe8,
	0xc1, 0xbb, 0xcf, 0x36, 0xef, 0x2c, 0xe4, 0xda, 0x12, 0x83, 0x4b, 0xd6, 0x74, 0x86, 0xd0, 0xeb,
	0x78, 0xdd, 0x56, 0xff, 0x88, 0xbb, 0xb6, 0x5f, 0x69, 0x7c, 0x4d, 0xe3, 0x23, 0x6b, 0x8e, 0xea,
	0x50, 0xf0, 0xe6, 0xb1, 0xbd, 0xc5, 0x8a, 0x62, 0xcc, 0xc9, 0xe4, 0x14, 0x1b, 0x59, 0x2a, 0x94,
	0xd3, 0x58, 0xa1, 0xcb, 0x65, 0xa1, 0xdf, 0x69, 0x74, 0x5b, 0xfd, 0x31, 0xff, 0xd3, 0x65, 0xf8,
	0xe7, 0x23, 0xf2, 0xfb, 0x15, 0x3d, 0x58, 0xfc, 0xc8, 0xd1, 0x87, 0x6b, 0xf8, 0xad, 0xa6, 0xb4,
	0x8c, 0x76, 0x17, 0xdf, 0xe9, 0xc1, 0x05, 0x6b, 0x67, 0x4b, 0x30, 0x71, 0x21, 0x15, 0x4c, 0x25,
	0x25, 0x31, 0xa5, 0x79, 0x46, 0xf1, 0x14, 0x5f, 0x25, 0xe8, 0xb0, 0xd1, 0xf1, 0xba, 0xff, 0xa3,
	0x9d, 0xca, 0xf1, 0x54, 0x1b, 0x1e, 0x2b, 0xfd, 0xc6, 0xca, 0xed, 0x21, 0xdb, 0xff, 0xb9, 0x73,
	0xb0, 0xc5, 0x1a, 0xcb, 0xc4, 0x0d, 0x6e, 0x23, 0xaa, 0x96, 0xc1, 0x36, 0xfb, 0x57, 0x48, 0x95,
	0x27, 0xa1, 0x6f, 0xf7, 0x5c, 0x71, 0xee, 0x9f, 0x79, 0x57, 0xa7, 0xe3, 0x81, 0x1b, 0x01, 0xa0,
	0x90, 0x06, 0xc4, 0x2f, 0xbf, 0xc4, 0x73, 0xd3, 0xbe, 0xdb, 0xc9, 0x47, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x08, 0xf6, 0x84, 0x14, 0x44, 0x02, 0x00, 0x00,
}
