// Code generated by MockGen. DO NOT EDIT.
// Source: ./factory.go

// Package streamfilter is a generated GoMock package.

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package streamfilter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "mosn.io/api"
)

// MockStreamFilterFactory is a mock of StreamFilterFactory interface.
type MockStreamFilterFactory struct {
	ctrl     *gomock.Controller
	recorder *MockStreamFilterFactoryMockRecorder
}

// MockStreamFilterFactoryMockRecorder is the mock recorder for MockStreamFilterFactory.
type MockStreamFilterFactoryMockRecorder struct {
	mock *MockStreamFilterFactory
}

// NewMockStreamFilterFactory creates a new mock instance.
func NewMockStreamFilterFactory(ctrl *gomock.Controller) *MockStreamFilterFactory {
	mock := &MockStreamFilterFactory{ctrl: ctrl}
	mock.recorder = &MockStreamFilterFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamFilterFactory) EXPECT() *MockStreamFilterFactoryMockRecorder {
	return m.recorder
}

// CreateFilterChain mocks base method.
func (m *MockStreamFilterFactory) CreateFilterChain(context context.Context, callbacks api.StreamFilterChainFactoryCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateFilterChain", context, callbacks)
}

// CreateFilterChain indicates an expected call of CreateFilterChain.
func (mr *MockStreamFilterFactoryMockRecorder) CreateFilterChain(context, callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilterChain", reflect.TypeOf((*MockStreamFilterFactory)(nil).CreateFilterChain), context, callbacks)
}

// UpdateFactory mocks base method.
func (m *MockStreamFilterFactory) UpdateFactory(config StreamFiltersConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateFactory", config)
}

// UpdateFactory indicates an expected call of UpdateFactory.
func (mr *MockStreamFilterFactoryMockRecorder) UpdateFactory(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFactory", reflect.TypeOf((*MockStreamFilterFactory)(nil).UpdateFactory), config)
}
