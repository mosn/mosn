// Code generated by MockGen. DO NOT EDIT.
// Source: mosn.io/api/header.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "mosn.io/api"
)

// MockHeaderMap is a mock of HeaderMap interface.
type MockHeaderMap struct {
	ctrl     *gomock.Controller
	recorder *MockHeaderMapMockRecorder
}

// MockHeaderMapMockRecorder is the mock recorder for MockHeaderMap.
type MockHeaderMapMockRecorder struct {
	mock *MockHeaderMap
}

// NewMockHeaderMap creates a new mock instance.
func NewMockHeaderMap(ctrl *gomock.Controller) *MockHeaderMap {
	mock := &MockHeaderMap{ctrl: ctrl}
	mock.recorder = &MockHeaderMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeaderMap) EXPECT() *MockHeaderMapMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockHeaderMap) Add(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", key, value)
}

// Add indicates an expected call of Add.
func (mr *MockHeaderMapMockRecorder) Add(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHeaderMap)(nil).Add), key, value)
}

// ByteSize mocks base method.
func (m *MockHeaderMap) ByteSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByteSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ByteSize indicates an expected call of ByteSize.
func (mr *MockHeaderMapMockRecorder) ByteSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByteSize", reflect.TypeOf((*MockHeaderMap)(nil).ByteSize))
}

// Clone mocks base method.
func (m *MockHeaderMap) Clone() api.HeaderMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(api.HeaderMap)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockHeaderMapMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockHeaderMap)(nil).Clone))
}

// Del mocks base method.
func (m *MockHeaderMap) Del(key string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Del", key)
}

// Del indicates an expected call of Del.
func (mr *MockHeaderMapMockRecorder) Del(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockHeaderMap)(nil).Del), key)
}

// Get mocks base method.
func (m *MockHeaderMap) Get(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHeaderMapMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHeaderMap)(nil).Get), key)
}

// Range mocks base method.
func (m *MockHeaderMap) Range(f func(string, string) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", f)
}

// Range indicates an expected call of Range.
func (mr *MockHeaderMapMockRecorder) Range(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockHeaderMap)(nil).Range), f)
}

// Set mocks base method.
func (m *MockHeaderMap) Set(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockHeaderMapMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockHeaderMap)(nil).Set), key, value)
}
