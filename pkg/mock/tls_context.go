// Code generated by MockGen. DO NOT EDIT.
// Source: ../mtls/tls_context.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "mosn.io/mosn/pkg/config/v2"
	mtls "mosn.io/mosn/pkg/mtls"
	tls "mosn.io/mosn/pkg/mtls/crypto/tls"
	types "mosn.io/mosn/pkg/types"
)

// MockTlsContext is a mock of TlsContext interface.
type MockTlsContext struct {
	ctrl     *gomock.Controller
	recorder *MockTlsContextMockRecorder
}

// MockTlsContextMockRecorder is the mock recorder for MockTlsContext.
type MockTlsContextMockRecorder struct {
	mock *MockTlsContext
}

// NewMockTlsContext creates a new mock instance.
func NewMockTlsContext(ctrl *gomock.Controller) *MockTlsContext {
	mock := &MockTlsContext{ctrl: ctrl}
	mock.recorder = &MockTlsContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTlsContext) EXPECT() *MockTlsContextMockRecorder {
	return m.recorder
}

// GetClientTLSConfigContext mocks base method.
func (m *MockTlsContext) GetClientTLSConfigContext() *types.TLSConfigContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientTLSConfigContext")
	ret0, _ := ret[0].(*types.TLSConfigContext)
	return ret0
}

// GetClientTLSConfigContext indicates an expected call of GetClientTLSConfigContext.
func (mr *MockTlsContextMockRecorder) GetClientTLSConfigContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientTLSConfigContext", reflect.TypeOf((*MockTlsContext)(nil).GetClientTLSConfigContext))
}

// GetSecretInfo mocks base method.
func (m *MockTlsContext) GetSecretInfo() *mtls.SecretInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretInfo")
	ret0, _ := ret[0].(*mtls.SecretInfo)
	return ret0
}

// GetSecretInfo indicates an expected call of GetSecretInfo.
func (mr *MockTlsContextMockRecorder) GetSecretInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretInfo", reflect.TypeOf((*MockTlsContext)(nil).GetSecretInfo))
}

// GetServerTLSConfigContext mocks base method.
func (m *MockTlsContext) GetServerTLSConfigContext() *types.TLSConfigContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerTLSConfigContext")
	ret0, _ := ret[0].(*types.TLSConfigContext)
	return ret0
}

// GetServerTLSConfigContext indicates an expected call of GetServerTLSConfigContext.
func (mr *MockTlsContextMockRecorder) GetServerTLSConfigContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerTLSConfigContext", reflect.TypeOf((*MockTlsContext)(nil).GetServerTLSConfigContext))
}

// GetTLSConfig mocks base method.
func (m *MockTlsContext) GetTLSConfig() *v2.TLSConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTLSConfig")
	ret0, _ := ret[0].(*v2.TLSConfig)
	return ret0
}

// GetTLSConfig indicates an expected call of GetTLSConfig.
func (mr *MockTlsContextMockRecorder) GetTLSConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLSConfig", reflect.TypeOf((*MockTlsContext)(nil).GetTLSConfig))
}

// MatchedALPN mocks base method.
func (m *MockTlsContext) MatchedALPN(protocols []string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchedALPN", protocols)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MatchedALPN indicates an expected call of MatchedALPN.
func (mr *MockTlsContextMockRecorder) MatchedALPN(protocols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchedALPN", reflect.TypeOf((*MockTlsContext)(nil).MatchedALPN), protocols)
}

// MatchedServerName mocks base method.
func (m *MockTlsContext) MatchedServerName(sn string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchedServerName", sn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MatchedServerName indicates an expected call of MatchedServerName.
func (mr *MockTlsContextMockRecorder) MatchedServerName(sn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchedServerName", reflect.TypeOf((*MockTlsContext)(nil).MatchedServerName), sn)
}

// SetClientConfig mocks base method.
func (m *MockTlsContext) SetClientConfig(template *tls.Config, cfg *v2.TLSConfig, hooks mtls.ConfigHooks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClientConfig", template, cfg, hooks)
}

// SetClientConfig indicates an expected call of SetClientConfig.
func (mr *MockTlsContextMockRecorder) SetClientConfig(template, cfg, hooks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientConfig", reflect.TypeOf((*MockTlsContext)(nil).SetClientConfig), template, cfg, hooks)
}

// SetServerConfig mocks base method.
func (m *MockTlsContext) SetServerConfig(template *tls.Config, cfg *v2.TLSConfig, hooks mtls.ConfigHooks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetServerConfig", template, cfg, hooks)
}

// SetServerConfig indicates an expected call of SetServerConfig.
func (mr *MockTlsContextMockRecorder) SetServerConfig(template, cfg, hooks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServerConfig", reflect.TypeOf((*MockTlsContext)(nil).SetServerConfig), template, cfg, hooks)
}
