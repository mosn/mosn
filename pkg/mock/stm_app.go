// Code generated by MockGen. DO NOT EDIT.
// Source: ../stagemanager/stage_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "mosn.io/mosn/pkg/config/v2"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockApplication) Close(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", arg0)
}

// Close indicates an expected call of Close.
func (mr *MockApplicationMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockApplication)(nil).Close), arg0)
}

// InheritConnections mocks base method.
func (m *MockApplication) InheritConnections() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InheritConnections")
	ret0, _ := ret[0].(error)
	return ret0
}

// InheritConnections indicates an expected call of InheritConnections.
func (mr *MockApplicationMockRecorder) InheritConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InheritConnections", reflect.TypeOf((*MockApplication)(nil).InheritConnections))
}

// Init mocks base method.
func (m *MockApplication) Init(arg0 *v2.MOSNConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockApplicationMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockApplication)(nil).Init), arg0)
}

// IsFromUpgrade mocks base method.
func (m *MockApplication) IsFromUpgrade() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFromUpgrade")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFromUpgrade indicates an expected call of IsFromUpgrade.
func (mr *MockApplicationMockRecorder) IsFromUpgrade() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFromUpgrade", reflect.TypeOf((*MockApplication)(nil).IsFromUpgrade))
}

// Shutdown mocks base method.
func (m *MockApplication) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockApplicationMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockApplication)(nil).Shutdown))
}

// Start mocks base method.
func (m *MockApplication) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockApplicationMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockApplication)(nil).Start))
}
