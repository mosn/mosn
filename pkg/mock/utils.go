// Code generated by MockGen. DO NOT EDIT.
// Source: ../types/utils.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBoolSwitch is a mock of BoolSwitch interface
type MockBoolSwitch struct {
	ctrl     *gomock.Controller
	recorder *MockBoolSwitchMockRecorder
}

// MockBoolSwitchMockRecorder is the mock recorder for MockBoolSwitch
type MockBoolSwitchMockRecorder struct {
	mock *MockBoolSwitch
}

// NewMockBoolSwitch creates a new mock instance
func NewMockBoolSwitch(ctrl *gomock.Controller) *MockBoolSwitch {
	mock := &MockBoolSwitch{ctrl: ctrl}
	mock.recorder = &MockBoolSwitchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBoolSwitch) EXPECT() *MockBoolSwitchMockRecorder {
	return m.recorder
}

// Enable mocks base method
func (m *MockBoolSwitch) Enable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Enable")
}

// Enable indicates an expected call of Enable
func (mr *MockBoolSwitchMockRecorder) Enable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockBoolSwitch)(nil).Enable))
}

// Disable mocks base method
func (m *MockBoolSwitch) Disable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disable")
}

// Disable indicates an expected call of Disable
func (mr *MockBoolSwitchMockRecorder) Disable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockBoolSwitch)(nil).Disable))
}

// Status mocks base method
func (m *MockBoolSwitch) Status() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Status indicates an expected call of Status
func (mr *MockBoolSwitchMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockBoolSwitch)(nil).Status))
}
